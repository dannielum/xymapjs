{
  "plugins": ["react"],

  "parserOptions": {
    "sourceType": "module",
    "ecmaVersion": 6,
    "ecmaFeatures": {
      "globalReturn": true,
      "jsx": true
    }
  },

  "env": {
    "browser": true,
    "node": true,
    "es6": true,
    "jasmine": true
  },

  "extends": [
    "eslint:recommended",
    "plugin:react/recommended"
  ],

  "rules": {
    // ## Eslint-react rules
    // ## Temporary ovewrites, remove them to fall back to recommended set
    // "react/no-comment-textnodes": 0, // Prevent comments from being inserted as text nodes
    "react/no-did-mount-set-state": 0, // Prevent usage of setState in componentDidMount
    "react/no-did-update-set-state": 0, // Prevent usage of setState in componentDidUpdate
    "react/no-direct-mutation-state": 0, // Prevent direct mutation of this.state
    "react/no-is-mounted": 0, // Prevent usage of isMounted
    "react/require-render-return": 2, // Enforce ES5 or ES6 class for returning value in render function
    "react/self-closing-comp": 2, // Prevent extra closing tags for components without children
    "react/sort-comp": 0, // Enforce component methods order
    "react/sort-prop-types": 0, // Enforce propTypes declarations alphabetical sorting
    "react/jsx-wrap-multilines": 2, // Prevent missing parentheses around multilines JSX (fixable)
    "react/jsx-boolean-value": 2, // Enforce boolean attributes notation in JSX (fixable)
    "react/jsx-closing-bracket-location": [2, "after-props"], // Validate closing bracket location in JSX (fixable)
    "react/jsx-curly-spacing": [2, "always"], // Enforce or disallow spaces inside of curly braces in JSX attributes (fixable)
    "react/jsx-equals-spacing": 2, // Enforce or disallow spaces around equal signs in JSX attributes (fixable)
    "react/jsx-indent": [2, 2], // Validate JSX indentation
    // "react/jsx-indent-props": 0, // Validate props indentation in JSX (fixable)
    "react/jsx-key": 2, // Validate JSX has key prop when in array or iterator
    // "react/jsx-no-bind": 2, // Prevent usage of .bind() and arrow functions in JSX props
    "react/jsx-pascal-case": 2, // Enforce PascalCase for user-defined JSX components
    // "react/jsx-sort-props": 0, // Enforce props alphabetical sorting
    "react/jsx-space-before-closing": 0, // Validate spacing before closing bracket in JSX (fixable)

    // "react/no-did-update-set-state": 0,
    // "react/no-direct-mutation-state": 0,
    // "react/no-is-mounted": 0,
    // "react/no-did-mount-set-state": 0,
    // "react/react-in-jsx-scope": 1,

    // ## Possible Errors
    // These rules relate to possible syntax or logic errors in JavaScript code:
    "no-console": 1, // disallow the use of console
    "no-debugger": 1, // disallow the use of debugger
    // "no-extra-parens": 1, // disallow unnecessary parentheses

    // ## Best Practices
    // These rules relate to better ways of doing things to help you avoid problems:
    "array-callback-return": 2, // enforce `return` statements in callbacks of array methods
    "curly": [2, "multi-line"], // enforce consistent brace style for all control statements
    "eqeqeq": [2, "smart"], // require the use of `===` and `!==`
    "guard-for-in": 0, // require `for-in` loops to include an `if` statement
    "no-alert": 2, // disallow the use of `alert`, `confirm`, and `prompt`
    "no-extra-bind": 2, // disallow unnecessary calls to `.bind()`
    "no-lone-blocks": 2, // disallow unnecessary nested blocks
    "no-loop-func": 2, // disallow `function` declarations and expressions inside loop statements
    "no-multi-spaces": 2, // disallow multiple spaces (fixable)
    "no-new": 2, // disallow `new` operators outside of assignments or comparisons
    "no-new-func": 2, // disallow `new` operators with the `Function` object
    "no-new-wrappers": 2, // disallow `new` operators with the `String`, `Number`, and `Boolean` objects
    "no-return-assign": 2, // disallow assignment operators in `return` statements
    "no-self-compare": 2, // disallow comparisons where both sides are exactly the same
    "no-sequences": 2, // disallow comma operators
    "no-unused-expressions": 2, // disallow unused expressions
    "no-useless-call": 2, // disallow unnecessary calls to `.call()` and `.apply()`
    "no-useless-concat": 2, // disallow unnecessary concatenation of literals or template literals
    "no-useless-escape": 2, // disallow unnecessary escape characters
    // "radix": 1, // enforce the consistent use of the radix argument when using `parseInt()`

    // ## Variables
    // These rules relate to variable declarations:
    "no-undef-init": 1, // disallow initializing variables to `undefined`
    "no-use-before-define": [2, {"functions": false, "classes": false}], // disallow the use of variables before they are defined

    // ## Stylistic Issues
    // These rules relate to style guidelines, and are therefore quite subjective:
    "array-bracket-spacing": 2, // enforce consistent spacing inside array brackets (fixable)
    "block-spacing": 2, // enforce consistent spacing inside single-line blocks (fixable)
    "brace-style": [2, "1tbs", {"allowSingleLine": true}], // enforce consistent brace style for blocks
    "camelcase": [2, {"properties": "never"}], // enforce camelcase naming convention
    "comma-spacing": 2, // enforce consistent spacing before and after commas (fixable)
    "comma-style": 2, // enforce consistent comma style
    "computed-property-spacing": 2, // enforce consistent spacing inside computed property brackets (fixable)
    // "consistent-this": 1, // enforce consistent naming when capturing the current execution context
    "eol-last": 2, // enforce at least one newline at the end of files (fixable)
    // "func-names": 1, // require or disallow named `function` expressions
    // "func-style": 1, // enforce the consistent use of either `function` declarations or expressions
    "indent": [2, 2, {"SwitchCase": 1, "VariableDeclarator": 1}], // enforce consistent indentation (fixable)
    "jsx-quotes": 2, // enforce the consistent use of either double or single quotes in JSX attributes (fixable)
    "key-spacing": 2, // enforce consistent spacing between keys and values in object literal properties (fixable)
    "keyword-spacing": 2, // enforce consistent spacing before and after keywords (fixable)
    "linebreak-style": 2, // enforce consistent linebreak style (fixable)
    "new-parens": 2, // require parentheses when invoking a constructor with no arguments
    "no-array-constructor": 1, // disallow `Array` constructors
    "no-bitwise": 2, // disallow bitwise operators
    "no-lonely-if": 2, // disallow `if` statements as the only statement in `else` blocks
    // "no-mixed-operators": 1, // disallow mixes of different operators
    "no-multiple-empty-lines": 2, // disallow multiple empty lines (fixable)
    // "no-nested-ternary": 1, // disallow nested ternary expressions
    "no-new-object": 2, // disallow `Object` constructors
    "no-spaced-func": 2, // disallow spacing between `function` identifiers and their applications (fixable)
    "no-trailing-spaces": 2, // disallow trailing whitespace at the end of lines (fixable)
    "no-unneeded-ternary": [2, {"defaultAssignment": false}], // disallow ternary operators when simpler alternatives exist
    "no-whitespace-before-property": 2, // disallow whitespace before properties (fixable)
    // "object-curly-newline": 2, // enforce consistent line breaks inside braces (fixable)
    "object-curly-spacing": 2, // enforce consistent spacing inside braces (fixable)
    "object-property-newline": [2, {"allowMultiplePropertiesPerLine": true}], // enforce placing object properties on separate lines
    "one-var-declaration-per-line": [2, "always"], // require or disallow newlines around `var` declarations
    "operator-assignment": 2, // require or disallow assignment operator shorthand where possible
    "operator-linebreak": 2, // enforce consistent linebreak style for operators
    "padded-blocks": [2, "never"], // require or disallow padding within blocks (fixable)
    "quote-props": [2, "as-needed"], // require quotes around object literal property names
    "quotes": [2, "single"], // enforce the consistent use of either backticks, double, or single quotes (fixable)
    "semi": [2, "always"], // require or disallow semicolons instead of ASI (fixable)
    "semi-spacing": 2, // enforce consistent spacing before and after semicolons (fixable)
    "space-before-blocks": [2, "always"], // enforce consistent spacing before blocks (fixable)
    "space-before-function-paren": [2, "never"], // enforce consistent spacing before `function` definition opening parenthesis (fixable)
    "space-in-parens": [2, "never"], // enforce consistent spacing inside parentheses (fixable)
    "space-infix-ops": 2, // require spacing around operators (fixable)
    "space-unary-ops": [2, { "words": true, "nonwords": false }], // enforce consistent spacing before or after unary operators (fixable)
    "spaced-comment": 2, // enforce consistent spacing after the `//` or `/*` in a comment (fixable)

    // ## ECMAScript 6
    // These rules relate to ES6, also known as ES2015:
    "arrow-body-style": 2, // require braces around arrow function bodies
    "arrow-parens": 2, // require parentheses around arrow function arguments
    "arrow-spacing": 2, // enforce consistent spacing before and after the arrow in arrow functions (fixable)
    "no-duplicate-imports": 2, // disallow duplicate module imports
    "no-useless-computed-key": 2, // disallow unnecessary computed property keys in object literals
    "no-useless-rename": 2, // disallow renaming import, export, and destructured assignments to the same name (fixable)
    "no-var": 2, // require `let` or `const` instead of `var`
    "object-shorthand": 2, // require or disallow method and property shorthand syntax for object literals (fixable)
    // "prefer-arrow-callback": 1, // require arrow functions as callbacks
    // "prefer-const": 1, // require `const` declarations for variables that are never reassigned after declared
    // "prefer-rest-params": 1, // require rest parameters instead of `arguments`
    // "prefer-spread": 1, // require spread operators instead of `.apply()`
    // "prefer-template": 1, // require template literals instead of string concatenation
    "require-yield": 1, // require generator functions to contain `yield`
    "rest-spread-spacing": 2, // enforce spacing between rest and spread operators and their expressions (fixable)
    "template-curly-spacing": [2, "never"] // require or disallow spacing around embedded expressions of template strings (fixable)
  }
}
